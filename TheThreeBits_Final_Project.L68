00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/2/2020 2:27:50 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =00001202                  7  TEST_VALUE      EQU    $1202
00000000  =00001504                  8  SRC_MODE        EQU    $1504
00000000  =00001508                  9  SRC_REGISTER    EQU    $1508 
00000000  =00001512                 10  DEST_MODE       EQU    $1512
00000000  =00001516                 11  DEST_REGISTER   EQU    $1516  
00000000  =00001520                 12  OP_SIZE         EQU    $1520  
00000000                            13    
00001000                            14      ORG    $1000 
00001000                            15          
00001000                            16  START:  *Read starting memory location from user
00001000  43F9 00001964             17          LEA         Start1,A1
00001006  103C 000E                 18          MOVE.B      #14,D0
0000100A  4E4F                      19          TRAP        #15
0000100C  7400                      20          MOVEQ.L     #0,D2
0000100E  4EB9 00001680             21          JSR         ReadL
00001014  23C3 000019E8             22          MOVE.L      D3,StartMem
0000101A  43F9 000019F4             23          LEA         ENTER,A1
00001020  103C 000E                 24          MOVE.B      #14,D0
00001024  4E4F                      25          TRAP        #15
00001026                            26         
00001026                            27          *Read ending memory location from user
00001026  43F9 000019A7             28          LEA         Start2,A1
0000102C  103C 000E                 29          MOVE.B      #14,D0
00001030  4E4F                      30          TRAP        #15
00001032  7400                      31          MOVEQ.L     #0,D2
00001034  4EB9 00001680             32          JSR         ReadL
0000103A  23C3 000019EC             33          MOVE.L      D3,EndMem
00001040  43F9 000019F4             34          LEA         ENTER,A1
00001046  103C 000E                 35          MOVE.B      #14,D0
0000104A  4E4F                      36          TRAP        #15
0000104C                            37          
0000104C                            38          *Param for Search loop
0000104C  23F9 000019E8 000019F0    39          MOVE.L      StartMem,CurrentAddr
00001056                            40          
00001056                            41  Search  *Loop through start and end memory locations. Counter param for starting location and counting
00001056  2639 000019F0             42          MOVE.L      CurrentAddr,D3
0000105C  B6B9 000019EC             43          CMP.L       EndMem,D3
00001062  6E00 0016                 44          BGT         End
00001066  2839 000019F0             45          MOVE.L      CurrentAddr,D4
0000106C  4EB9 000017AE             46          JSR         OutL
00001072  4EB9 0000107E             47          JSR         JMPCHECK
00001078  60DC                      48          BRA         Search      
0000107A                            49          
0000107A                            50  End     *End of program 
0000107A  FFFF FFFF                 51          SIMHALT
0000107E                            52          
0000107E                            53  JMPCHECK
0000107E  7600                      54          MOVE.L      #0,D3
00001080  7400                      55          MOVE.L      #0,D2
00001082  2279 000019F0             56          MOVEA.L     CurrentAddr,A1
00001088  1419                      57          MOVE.B      (A1)+,D2
0000108A  52B9 000019F0             58          ADDQ.L      #$0001,CurrentAddr
00001090  E942                      59          ASL.W       #4,D2
00001092  E942                      60          ASL.W       #4,D2
00001094  1611                      61          MOVE.B      (A1),D3
00001096  D642                      62          ADD.W       D2,D3
00001098  2803                      63          MOVE.L      D3,D4
0000109A  C67C F000                 64          AND.W       #$F000,D3
0000109E  E883                      65          ASR.L       #4,D3
000010A0  E883                      66          ASR.L       #4,D3
000010A2  E883                      67          ASR.L       #4,D3
000010A4  B63C 0005                 68          CMP.B       #$05,D3
000010A8  6700 032E                 69          BEQ         addq
000010AC  B63C 0007                 70          CMP.B       #$07,D3
000010B0  6700 033A                 71          BEQ         moveql
000010B4  B63C 0009                 72          CMP.B       #$09,D3
000010B8  6700 0342                 73          BEQ         sub
000010BC  B63C 0008                 74          CMP.B       #$08,D3
000010C0  6700 034A                 75          BEQ         or
000010C4  B63C 000D                 76          CMP.B       #$0D,D3
000010C8  6700 02D6                 77          BEQ         addaadd
000010CC  B63C 000E                 78          CMP.B       #$0E,D3
000010D0  6700 022E                 79          BEQ         lsroas
000010D4  B63C 0004                 80          CMP.B       #$04,D3
000010D8  6700 017E                 81          BEQ         fourchecker
000010DC  B63C 0001                 82          CMP.B       #$01,D3
000010E0  6700 0160                 83          BEQ         moveb
000010E4  B63C 0006                 84          CMP.B       #$06,D3
000010E8  6700 006E                 85          BEQ         branchcheck
000010EC  6000 0002                 86          BRA         BADDATA
000010F0                            87          
000010F0                            88  BADDATA
000010F0  43F9 0000192C             89          LEA         PRINT_INVALIDDATA,A1
000010F6  103C 000E                 90          MOVE.B      #14,D0
000010FA  4E4F                      91          TRAP        #15
000010FC  6000 035E                 92          BRA         EACHECK        
00001100                            93          
00001100                            94  printsize        
00001100  3604                      95          MOVE.W      D4,D3
00001102  C67C 00C0                 96          AND.W       #%0000000011000000,D3
00001106  B67C 0000                 97          CMP.W       #%0000000000000000,D3
0000110A  6700 0020                 98          BEQ         printb
0000110E  B67C 0040                 99          CMP.W       #%0000000001000000,D3
00001112  6700 002E                100          BEQ         printw
00001116  43F9 00001A05            101          LEA         PrintSizeL,A1
0000111C  103C 000E                102          MOVE.B      #14,D0
00001120  4E4F                     103          TRAP        #15
00001122  11FC 0002 1520           104          MOVE.B      #2,OP_SIZE
00001128  3604                     105          MOVE.W      D4,D3
0000112A  4E75                     106          RTS
0000112C                           107          
0000112C                           108  printb
0000112C  43F9 000019FE            109          LEA         PrintSizeB,A1
00001132  103C 000E                110          MOVE.B      #14,D0
00001136  4E4F                     111          TRAP        #15
00001138  11FC 0000 1520           112          MOVE.B      #0,OP_SIZE
0000113E  3604                     113          MOVE.W      D4,D3
00001140  4E75                     114          RTS
00001142                           115          
00001142                           116  printw
00001142  43F9 000019F7            117          LEA         PrintSizeW,A1
00001148  103C 000E                118          MOVE.B      #14,D0
0000114C  4E4F                     119          TRAP        #15
0000114E  11FC 0001 1520           120          MOVE.B      #1,OP_SIZE
00001154  3604                     121          MOVE.W      D4,D3
00001156  4E75                     122          RTS
00001158                           123          
00001158                           124  branchcheck
00001158  3604                     125          MOVE.W      D4,D3
0000115A  C67C 0F00                126          AND.W       #$0F00,D3
0000115E  B67C 0E00                127          CMP.W       #$0E00,D3
00001162  6700 0016                128          BEQ         bgt
00001166  B67C 0F00                129          CMP.W       #$0F00,D3
0000116A  6700 0020                130          BEQ         ble
0000116E  B67C 0000                131          CMP.W       #$0000,D3
00001172  6700 002A                132          BEQ         bra
00001176  6000 0038                133          BRA         beq
0000117A                           134          
0000117A                           135  bgt
0000117A  43F9 00001A6E            136          LEA         PrintBGT,A1
00001180  103C 000E                137          MOVE.B      #14,D0
00001184  4E4F                     138          TRAP        #15
00001186  3604                     139          MOVE.W      D4,D3
00001188  6000 0068                140          BRA         displacementcheck         
0000118C                           141  
0000118C                           142  ble
0000118C  43F9 00001A76            143          LEA         PrintBLE,A1
00001192  103C 000E                144          MOVE.B      #14,D0
00001196  4E4F                     145          TRAP        #15
00001198  3604                     146          MOVE.W      D4,D3
0000119A  6000 0056                147          BRA         displacementcheck
0000119E                           148  
0000119E                           149  bra
0000119E  43F9 00001A7E            150          LEA         PrintBRA,A1
000011A4  103C 000E                151          MOVE.B      #14,D0
000011A8  4E4F                     152          TRAP        #15
000011AA  3604                     153          MOVE.W      D4,D3
000011AC  6000 0044                154          BRA         displacementcheck
000011B0                           155  
000011B0                           156  beq
000011B0  43F9 00001A86            157          LEA         Printbeq,A1
000011B6  103C 000E                158          MOVE.B      #14,D0
000011BA  4E4F                     159          TRAP        #15
000011BC  3604                     160          MOVE.W      D4,D3
000011BE  6000 0032                161          BRA         displacementcheck
000011C2                           162  
000011C2                           163  jsrdisp
000011C2  7600                     164          MOVE.L      #0,D3
000011C4  7400                     165          MOVE.L      #0,D2
000011C6  52B9 000019F0            166          ADDQ.L      #$0001,CurrentAddr
000011CC  2279 000019F0            167          MOVEA.L     CurrentAddr,A1
000011D2  1419                     168          MOVE.B      (A1)+,D2
000011D4  52B9 000019F0            169          ADDQ.L      #$0001,CurrentAddr
000011DA  E942                     170          ASL.W       #4,D2
000011DC  E942                     171          ASL.W       #4,D2
000011DE  E942                     172          ASL.W       #4,D2
000011E0  E942                     173          ASL.W       #4,D2
000011E2  E942                     174          ASL.W       #4,D2
000011E4  E942                     175          ASL.W       #4,D2
000011E6  E942                     176          ASL.W       #4,D2
000011E8  1611                     177          MOVE.B      (A1),D3
000011EA  D642                     178          ADD.W       D2,D3
000011EC  2803                     179          MOVE.L      D3,D4
000011EE  6000 05BE                180          BRA         OutL
000011F2                           181  
000011F2                           182  displacementcheck
000011F2  3604                     183          MOVE.W      D4,D3
000011F4  C67C 00FF                184          AND.W       #$00FF,D3
000011F8  B67C 0000                185          CMP.W       #$0000,D3
000011FC  6E00 0030                186          BGT         worddisp
00001200  7600                     187          MOVE.L      #0,D3
00001202  7400                     188          MOVE.L      #0,D2
00001204  52B9 000019F0            189          ADDQ.L      #$0001,CurrentAddr
0000120A  2279 000019F0            190          MOVEA.L     CurrentAddr,A1
00001210  1419                     191          MOVE.B      (A1)+,D2
00001212  52B9 000019F0            192          ADDQ.L      #$0001,CurrentAddr
00001218  E942                     193          ASL.W       #4,D2
0000121A  E942                     194          ASL.W       #4,D2
0000121C  1611                     195          MOVE.B      (A1),D3
0000121E  D642                     196          ADD.W       D2,D3
00001220  2803                     197          MOVE.L      D3,D4
00001222  D8B9 000019F0            198          ADD.L       CurrentAddr,D4
00001228  5344                     199          SUBQ.W      #$0001,D4
0000122A  6000 0520                200          BRA         OutW
0000122E                           201          
0000122E                           202  worddisp
0000122E  C87C 00FF                203          AND.W       #$00FF,D4
00001232  4404                     204          NEG.B       D4
00001234  D8B9 000019F0            205          ADD.L       CurrentAddr,D4
0000123A  4404                     206          NEG.B       D4
0000123C  5344                     207          SUBQ.W      #$0001,D4
0000123E  6000 050C                208          BRA         OutW   
00001242                           209          
00001242                           210  moveb
00001242  43F9 00001A63            211          LEA         PrintMOVEB,A1
00001248  103C 000E                212          MOVE.B      #14,D0
0000124C  4E4F                     213          TRAP        #15
0000124E  11FC 0000 1520           214          MOVE.B      #0,OP_SIZE
00001254  6000 023C                215          BRA         EAFILL   
00001258                           216          
00001258                           217  fourchecker
00001258  3604                     218          MOVE.W      D4,D3
0000125A  C67C 0F00                219          AND.W       #$0F00,D3
0000125E  B67C 0600                220          CMP.W       #$0600,D3
00001262  6700 006A                221          BEQ         not
00001266  B67C 0800                222          CMP.W       #$0800,D3
0000126A  6700 0076                223          BEQ         movem
0000126E  B67C 0E00                224          CMP.W       #$0E00,D3
00001272  6700 0006                225          BEQ         noprtsjsr
00001276  6000 01A8                226          BRA         lea
0000127A                           227          
0000127A                           228  noprtsjsr
0000127A  3604                     229          MOVE.W      D4,D3
0000127C  C67C 00F0                230          AND.W       #$00F0,D3
00001280  B67C 0070                231          CMP.W       #$0070,D3
00001284  6700 0006                232          BEQ         noprts
00001288  6000 0024                233          BRA         jsr
0000128C                           234          
0000128C                           235  noprts
0000128C  3604                     236          MOVE.W      D4,D3
0000128E  C67C 000F                237          AND.W       #$000F,D3
00001292  B67C 0001                238          CMP.W       #$0001,D3
00001296  6700 0006                239          BEQ         nop
0000129A  6000 0022                240          BRA         rts
0000129E                           241  
0000129E                           242  nop
0000129E  43F9 00001A4B            243          LEA         PrintNOP,A1
000012A4  103C 000E                244          MOVE.B      #14,D0
000012A8  4E4F                     245          TRAP        #15
000012AA  3604                     246          MOVE.W      D4,D3
000012AC  4E75                     247          RTS
000012AE                           248          
000012AE                           249  jsr
000012AE  43F9 00001A5B            250          LEA         PrintJSR,A1
000012B4  103C 000E                251          MOVE.B      #14,D0
000012B8  4E4F                     252          TRAP        #15
000012BA  3604                     253          MOVE.W      D4,D3
000012BC  4E75                     254          RTS
000012BE                           255          
000012BE                           256  rts
000012BE  43F9 00001A53            257          LEA         PrintRTS,A1
000012C4  103C 000E                258          MOVE.B      #14,D0
000012C8  4E4F                     259          TRAP        #15
000012CA  3604                     260          MOVE.W      D4,D3
000012CC  4E75                     261          RTS
000012CE                           262  
000012CE                           263  not
000012CE  43F9 00001A41            264          LEA         PrintNOT,A1
000012D4  103C 000E                265          MOVE.B      #14,D0
000012D8  4E4F                     266          TRAP        #15
000012DA  4EB8 1100                267          JSR         printsize
000012DE  6000 01B2                268          BRA         EAFILL
000012E2                           269          
000012E2                           270  movem
000012E2  43F9 00001A45            271          LEA         PrintMOVEM,A1
000012E8  103C 000E                272          MOVE.B      #14,D0
000012EC  4E4F                     273          TRAP        #15
000012EE  3604                     274          MOVE.W      D4,D3
000012F0                           275          *TODO: ADD SIZE CHECK AND PRINT
000012F0  43F9 000019F4            276          LEA         ENTER,A1
000012F6  103C 000E                277          MOVE.B      #14,D0
000012FA  4E4F                     278          TRAP        #15
000012FC                           279          *TODO: UNIQUE EA FILL
000012FC  6000 015E                280          BRA         EACHECK
00001300                           281          
00001300                           282  lsroas
00001300  3604                     283          MOVE.W      D4,D3
00001302  C67C 0018                284          AND.W       #%0000000000011000,D3
00001306  B67C 0008                285          CMP.W       #%0000000000001000,D3
0000130A  6700 000E                286          BEQ         ls
0000130E  B67C 0018                287          CMP.W       #%0000000000011000,D3
00001312  6700 0024                288          BEQ         ro
00001316  6000 003E                289          BRA         as
0000131A                           290          
0000131A                           291  ls
0000131A  43F9 00001A34            292          LEA         PrintLS,A1
00001320  103C 000E                293          MOVE.B      #14,D0
00001324  4E4F                     294          TRAP        #15
00001326  3604                     295          MOVE.W      D4,D3
00001328  C67C 0100                296          AND.W       #%0000000100000000,D3
0000132C  B67C 0100                297          CMP.W       #%0000000100000000,D3
00001330  6700 0042                298          BEQ         rightshift
00001334  6000 0054                299          bra         leftshift
00001338                           300          
00001338                           301  ro
00001338  43F9 00001A37            302          LEA         PrintRO,A1
0000133E  103C 000E                303          MOVE.B      #14,D0
00001342  4E4F                     304          TRAP        #15
00001344  3604                     305          MOVE.W      D4,D3
00001346  C67C 0100                306          AND.W       #%0000000100000000,D3
0000134A  B67C 0100                307          CMP.W       #%0000000100000000,D3
0000134E  6700 0024                308          BEQ         rightshift
00001352  6000 0036                309          bra         leftshift
00001356                           310          
00001356                           311  as
00001356  43F9 00001A3A            312          LEA         PrintAS,A1
0000135C  103C 000E                313          MOVE.B      #14,D0
00001360  4E4F                     314          TRAP        #15
00001362  3604                     315          MOVE.W      D4,D3
00001364  C67C 0100                316          AND.W       #%0000000100000000,D3
00001368  B67C 0100                317          CMP.W       #%0000000100000000,D3
0000136C  6700 0006                318          BEQ         rightshift
00001370  6000 0018                319          bra         leftshift
00001374                           320          
00001374                           321  rightshift
00001374  43F9 00001A3D            322          LEA         PrintR,A1
0000137A  103C 000E                323          MOVE.B      #14,D0
0000137E  4E4F                     324          TRAP        #15
00001380  3604                     325          MOVE.W      D4,D3
00001382  4EB8 1100                326          JSR         printsize
00001386  6000 010A                327          BRA         EAFILL
0000138A                           328          
0000138A                           329  leftshift
0000138A  43F9 00001A3F            330          LEA         PrintL,A1
00001390  103C 000E                331          MOVE.B      #14,D0
00001394  4E4F                     332          TRAP        #15
00001396  3604                     333          MOVE.W      D4,D3
00001398  4EB8 1100                334          JSR         printsize
0000139C  6000 00F4                335          BRA         EAFILL
000013A0                           336          
000013A0                           337  addaadd
000013A0  3604                     338          MOVE.W      D4,D3
000013A2  C67C 00C0                339          AND.W       #%0000000011000000,D3
000013A6  B67C 00C0                340          CMP.W       #%0000000011000000,D3
000013AA  6700 0006                341          BEQ         adda
000013AE  6000 0014                342          BRA         add
000013B2                           343          
000013B2                           344  adda
000013B2  43F9 00001A2B            345          LEA         PrintADDA,A1
000013B8  103C 000E                346          MOVE.B      #14,D0
000013BC  4E4F                     347          TRAP        #15
000013BE  3604                     348          MOVE.W      D4,D3
000013C0                           349          *TODO CHECK AND PRINT SIZE
000013C0                           350          *TODO CUSTOM EA FILL
000013C0  6000 009A                351          BRA         EACHECK
000013C4                           352  add
000013C4  43F9 00001A30            353          LEA         PrintADD,A1
000013CA  103C 000E                354          MOVE.B      #14,D0
000013CE  4E4F                     355          TRAP        #15
000013D0  4EB8 1100                356          JSR         printsize
000013D4                           357          *TODO CUSTOM EA FILL
000013D4  6000 0086                358          BRA         EACHECK 
000013D8                           359  addq
000013D8  43F9 00001A13            360          LEA         PrintADDQ,A1
000013DE  103C 000E                361          MOVE.B      #14,D0
000013E2  4E4F                     362          TRAP        #15
000013E4  4EB8 1100                363          JSR         printsize
000013E8                           364          *TODO CUSTOM EA FILL
000013E8  6000 0072                365          BRA         EACHECK
000013EC                           366  
000013EC                           367  moveql
000013EC  43F9 00001A18            368          LEA         PrintMOVEQL,A1
000013F2  103C 000E                369          MOVE.B      #14,D0
000013F6  4E4F                     370          TRAP        #15
000013F8                           371          *TODO CUSTOM EA FILL
000013F8  6000 0062                372          BRA         EACHECK
000013FC                           373  sub
000013FC  43F9 00001A24            374          LEA         PrintSUB,A1
00001402  103C 000E                375          MOVE.B      #14,D0
00001406  4E4F                     376          TRAP        #15
00001408  6000 FCF6                377          BRA         printsize
0000140C                           378  or
0000140C  43F9 00001A28            379          LEA         PrintOR,A1
00001412  103C 000E                380          MOVE.B      #14,D0
00001416  4E4F                     381          TRAP        #15
00001418  4EB8 1100                382          JSR         printsize
0000141C                           383          *TODO CUSTOM EA FILL
0000141C  6000 003E                384          BRA         EACHECK
00001420                           385  lea
00001420  43F9 00001A0C            386          LEA         PrintLEA,A1
00001426  103C 000E                387          MOVE.B      #14,D0
0000142A  4E4F                     388          TRAP        #15 
0000142C                           389          
0000142C                           390          *CUSTOM EA FILL
0000142C  31FC 0001 1512           391          MOVE.W      #%001,DEST_MODE      
00001432                           392          
00001432  3604                     393          MOVE.W      D4,D3
00001434  C67C 0E00                394          AND.W       #%0000111000000000,D3
00001438  E883                     395          ASR.L       #4,D3
0000143A  E883                     396          ASR.L       #4,D3
0000143C  E283                     397          ASR.L       #1,D3
0000143E  31C3 1516                398          MOVE.W      D3,DEST_REGISTER
00001442                           399          
00001442  3604                     400          MOVE.W      D4,D3
00001444  C67C 0038                401          AND.W       #%0000000000111000,D3
00001448  E683                     402          ASR.L       #3,D3
0000144A  31C3 1504                403          MOVE.W      D3,SRC_MODE
0000144E                           404          
0000144E  3604                     405          MOVE.W      D4,D3
00001450  C67C 0007                406          AND.W       #%0000000000000111,D3
00001454  31C3 1508                407          MOVE.W      D3,SRC_REGISTER
00001458                           408          
00001458  6000 0002                409          BRA         EACHECK
0000145C                           410          
0000145C                           411  EACHECK 
0000145C                           412          * EA code start
0000145C  3238 1504                413          MOVE.W      SRC_MODE,D1      *decode and print source EA   
00001460  3438 1508                414          MOVE.W      SRC_REGISTER,D2
00001464  4EB9 000014CC            415          JSR         DECODE_EA   
0000146A                           416          
0000146A  43F9 0000191E            417          LEA         PRINT_COMMA,A1   *print comma 
00001470  103C 000E                418          MOVE.B      #14,D0                     
00001474  4E4F                     419          TRAP        #15 
00001476                           420     
00001476  3238 1512                421          MOVE.W      DEST_MODE,D1    *decode and print destination EA
0000147A  3438 1516                422          MOVE.W      DEST_REGISTER,D2
0000147E  4EB9 000014CC            423          JSR         DECODE_EA
00001484                           424          
00001484  43F9 000019F4            425          LEA         ENTER,A1
0000148A  103C 000E                426          MOVE.B      #14,D0
0000148E  4E4F                     427          TRAP        #15
00001490                           428          
00001490  4E75                     429          RTS 
00001492                           430          
00001492                           431  EAFILL
00001492  3604                     432          MOVE.W      D4,D3
00001494  C67C 01C0                433          AND.W       #%0000000111000000,D3
00001498  E883                     434          ASR.L       #4,D3
0000149A  E483                     435          ASR.L       #2,D3
0000149C  31C3 1512                436          MOVE.W      D3,DEST_MODE      
000014A0                           437          
000014A0  3604                     438          MOVE.W      D4,D3
000014A2  C67C 0E00                439          AND.W       #%0000111000000000,D3
000014A6  E883                     440          ASR.L       #4,D3
000014A8  E883                     441          ASR.L       #4,D3
000014AA  E283                     442          ASR.L       #1,D3
000014AC  31C3 1516                443          MOVE.W      D3,DEST_REGISTER
000014B0                           444          
000014B0  3604                     445          MOVE.W      D4,D3
000014B2  C67C 0038                446          AND.W       #%0000000000111000,D3
000014B6  E683                     447          ASR.L       #3,D3
000014B8  31C3 1504                448          MOVE.W      D3,SRC_MODE
000014BC                           449          
000014BC  3604                     450          MOVE.W      D4,D3
000014BE  C67C 0007                451          AND.W       #%0000000000000111,D3
000014C2  31C3 1508                452          MOVE.W      D3,SRC_REGISTER
000014C6  3A04                     453          MOVE.W      D4,D5
000014C8  4244                     454          CLR         D4
000014CA                           455          
000014CA  6090                     456          BRA         EACHECK
000014CC                           457          
000014CC                           458  DECODE_EA 
000014CC  47F9 000014E2            459          LEA         EAMODE_TABLE,A3 *load EA mode juno table to A3
000014D2  49F9 000018F2            460          LEA         HEX_CHAR,A4
000014D8  C2FC 0006                461          MULU        #6,D1  
000014DC  4EB3 1000                462          JSR         0(A3,D1)
000014E0  4E75                     463          RTS
000014E2                           464      
000014E2                           465  EAMODE_TABLE
000014E2  4EF9 00001512            466          JMP         MODE_000
000014E8  4EF9 0000152E            467          JMP         MODE_001
000014EE  4EF9 0000154A            468          JMP         MODE_010
000014F4  4EF9 00001568            469          JMP         MODE_011
000014FA  4EF9 0000157A            470          JMP         MODE_100
00001500  4EF9 0000158C            471          JMP         MODE_101
00001506  4EF9 00001592            472          JMP         MODE_110
0000150C  4EF9 00001598            473          JMP         MODE_111
00001512                           474      
00001512                           475  *Data register mode
00001512                           476  MODE_000
00001512  781A                     477          MOVE.L      #26,D4
00001514  43F4 4000                478          LEA         0(A4,D4),A1
00001518  103C 000E                479          MOVE.B      #14,D0
0000151C  4E4F                     480          TRAP        #15     *Print 'D' using HEX_CHAR table        
0000151E  C4FC 0002                481          MULU        #2,D2
00001522  43F4 2000                482          LEA         0(A4,D2),A1
00001526  103C 000E                483          MOVE.B      #14,D0
0000152A  4E4F                     484          TRAP        #15
0000152C  4E75                     485          RTS
0000152E                           486      
0000152E                           487  *Address register mode
0000152E                           488  MODE_001
0000152E  7814                     489          MOVE.L      #20,D4
00001530  43F4 4000                490          LEA         0(A4,D4),A1
00001534  103C 000E                491          MOVE.B      #14,D0
00001538  4E4F                     492          TRAP        #15      *Print 'A' using HEX_CHAR table
0000153A                           493      
0000153A  C4FC 0002                494          MULU        #2,D2
0000153E  43F4 2000                495          LEA         0(A4,D2),A1
00001542  103C 000E                496          MOVE.B      #14,D0
00001546  4E4F                     497          TRAP        #15
00001548  4E75                     498          RTS
0000154A                           499  
0000154A                           500  *Indirect Address register mode
0000154A                           501  MODE_010
0000154A  43F9 00001912            502          LEA         PRINT_LPAREN,A1
00001550  103C 000E                503          MOVE.B      #14,D0    
00001554  4E4F                     504          TRAP        #15    
00001556  4EB8 152E                505          JSR         Mode_001
0000155A  43F9 00001914            506          LEA         PRINT_RPAREN,A1
00001560  103C 000E                507          MOVE.B      #14,D0
00001564  4E4F                     508          TRAP        #15
00001566  4E75                     509          RTS
00001568                           510  
00001568                           511  *Address register with post-increment
00001568                           512  MODE_011
00001568  4EB8 154A                513          JSR         MODE_010
0000156C  43F9 00001918            514          LEA         PRINT_PLUS,A1
00001572  103C 000E                515          MOVE.B      #14,D0
00001576  4E4F                     516          TRAP        #15
00001578  4E75                     517          RTS
0000157A                           518      
0000157A                           519  *Address register with post-increment
0000157A                           520  MODE_100
0000157A  43F9 00001916            521          LEA         PRINT_MINUS,A1
00001580  103C 000E                522          MOVE.B      #14,D0
00001584  4E4F                     523          TRAP        #15
00001586  4EB8 154A                524          JSR         MODE_010
0000158A  4E75                     525          RTS
0000158C                           526  
0000158C                           527  MODE_101
0000158C  4EF9 00001672            528          JMP         INVALID
00001592                           529          
00001592                           530  MODE_110
00001592  4EF9 00001672            531          JMP         INVALID
00001598                           532      
00001598                           533  MODE_111    
00001598  264A                     534          MOVEA.L     A2,A3
0000159A  B43C 0000                535          CMP.B       #%000,D2
0000159E  6700 002A                536          BEQ         ABS_Short     
000015A2  B43C 0001                537          CMP.B       #%001,D2
000015A6  6700 000E                538          BEQ         ABS_Long      
000015AA  B43C 0004                539          CMP.B       #%100,D2
000015AE  6700 003C                540          BEQ         IMMEDIATE       
000015B2  6000 00BE                541          BRA         INVALID
000015B6                           542  
000015B6                           543  
000015B6                           544  *Absolute long mode
000015B6                           545  ABS_LONG  
000015B6  43F9 0000191C            546          LEA     PRINT_OCTOTH,A1
000015BC  103C 000E                547          MOVE.B  #14,D0
000015C0  4E4F                     548          TRAP    #15
000015C2                           549          *TODO PRINT LONG DATA
000015C2  5AB9 000019F0            550          ADDQ.L  #$0005,CurrentAddr
000015C8  4E75                     551          RTS
000015CA                           552            
000015CA                           553  *Absolute short mode
000015CA                           554  ABS_SHORT
000015CA  43F9 0000191A            555          LEA     PRINT_DOLLAR,A1
000015D0  103C 000E                556          MOVE.B  #14,D0
000015D4  4E4F                     557          TRAP    #15
000015D6  544B                     558          ADDA.W  #2,A3                
000015D8  3C13                     559          MOVE.W  (A3),D6      
000015DA  7A04                     560          MOVE.L  #4,D5              
000015DC  4EB9 0000163C            561          JSR     PRINT_HEX
000015E2  544A                     562          ADDA.W  #2,A2
000015E4  56B9 000019F0            563          ADDQ.L  #$0003,CurrentAddr
000015EA  4E75                     564          RTS
000015EC                           565          
000015EC                           566  *Immediate short mode
000015EC                           567  IMMEDIATE       
000015EC  43F9 0000191C            568          LEA     PRINT_OCTOTH,A1  
000015F2  103C 000E                569          MOVE.B  #14,D0
000015F6  4E4F                     570          TRAP    #15   
000015F8  43F9 0000191A            571          LEA     PRINT_DOLLAR,A1                     
000015FE  103C 000E                572          MOVE.B  #14,D0                
00001602  4E4F                     573          TRAP    #15
00001604  4283                     574          CLR.L   D3                
00001606  1638 1520                575          MOVE.B  OP_SIZE,D3          
0000160A  B63C 0001                576          CMP.B   #1,D3        
0000160E  6E00 001A                577          BGT     IMMED_L                                
00001612  544B                     578          ADDA.W  #2, A3
00001614  4286                     579          CLR.L   D6
00001616  3C13                     580          MOVE.W  (A3),D6                
00001618  7A04                     581          MOVE.L  #4,D5        *4 characters to display       
0000161A  4EB9 0000163C            582          JSR     PRINT_HEX
00001620  544A                     583          ADDA.W  #2,A2 
00001622  58B9 000019F0            584          ADDQ.L  #$0004,CurrentAddr
00001628  4E75                     585          RTS
0000162A                           586  
0000162A                           587  IMMED_L      
0000162A  544B                     588          ADDA.W  #2,A3
0000162C  4286                     589          CLR.L   D6                
0000162E  2C13                     590          MOVE.L  (A3),D6                
00001630  7A08                     591          MOVE.L  #8,D5               *8 characters to display
00001632  4EB9 0000163C            592          JSR     PRINT_HEX                
00001638  584A                     593          ADDA.W  #4,A2 
0000163A  4E75                     594          RTS 
0000163C                           595                  
0000163C                           596  PRINT_HEX       
0000163C  48E7 3C00                597          MOVEM.L D2-D5,-(SP)                                        
00001640  47F9 000018F2            598          LEA     HEX_CHAR,A3
00001646  CAFC 0004                599          MULU.W  #4,D5              
0000164A  7420                     600          MOVE.L  #32,D2              *set the total number of bits                
0000164C  9485                     601          SUB.L   D5,D2                              
0000164E  761C                     602          MOVE.L  #28,D3              
00001650                           603  LOOP         
00001650  2806                     604          MOVE.L  D6,D4               *display one char per iteraiton               
00001652  E5AC                     605          LSL.L   D2,D4               
00001654  E6AC                     606          LSR.L   D3,D4               
00001656  C8FC 0002                607          MULU    #2,D4               *find location character in char_table
0000165A  43F3 4000                608          LEA     0(A3,D4),A1                        
0000165E  103C 000E                609          MOVE.B  #14,D0                             
00001662  4E4F                     610          TRAP    #15                 
00001664                           611                  
00001664  5802                     612          ADD.B   #4,D2               *add 4 to displacement to get next nibble
00001666  B43C 0020                613          CMP.B   #32,D2                        
0000166A  66E4                     614          BNE     LOOP
0000166C  4CDF 003C                615          MOVEM.L (SP)+,D2-D5         
00001670  4E75                     616          RTS
00001672                           617  
00001672                           618  **
00001672                           619  *Invalid EA mode. Jump to "prompt uset to input" when merging
00001672                           620  **
00001672                           621  INVALID 
00001672  43F9 00001920            622      LEA     PRINT_INVALIDEA,A1
00001678  103C 000E                623      MOVE.B  #14,D0
0000167C  4E4F                     624      TRAP    #15
0000167E  4E75                     625      RTS
00001680                           626          
00001680                           627          
00001680                           628  ReadL   *Reads word size hexa from keyboard input, bit shifting for byte size operations
00001680                           629          *param: D1 for trap tasks, D2 for calculations and final hexa
00001680                           630          *return: puts final hexa digit to D3
00001680                           631  
00001680                           632          *Read single character from input, convert to hex, bit shift left
00001680                           633          *3 bytes and add to D2
00001680  4EB9 00001898            634          JSR         RCHR
00001686  1C01                     635          MOVE.B      D1,D6
00001688  4EB9 000018A0            636          JSR         AtoH
0000168E  2206                     637          MOVE.L      D6,D1
00001690  E989                     638          LSL.L       #4,D1
00001692  E989                     639          LSL.L       #4,D1
00001694  E989                     640          LSL.L       #4,D1
00001696  E989                     641          LSL.L       #4,D1
00001698  E989                     642          LSL.L       #4,D1
0000169A  E989                     643          LSL.L       #4,D1
0000169C  E989                     644          LSL.L       #4,D1
0000169E  D481                     645          ADD.L       D1,D2
000016A0                           646          
000016A0                           647          *Read single character from input, convert to hex, bit shift left
000016A0                           648          *3 bytes and add to D2
000016A0  4EB9 00001898            649          JSR         RCHR
000016A6  1C01                     650          MOVE.B      D1,D6
000016A8  4EB9 000018A0            651          JSR         AtoH
000016AE  2206                     652          MOVE.L      D6,D1
000016B0  E989                     653          LSL.L       #4,D1
000016B2  E989                     654          LSL.L       #4,D1
000016B4  E989                     655          LSL.L       #4,D1
000016B6  E989                     656          LSL.L       #4,D1
000016B8  E989                     657          LSL.L       #4,D1
000016BA  E989                     658          LSL.L       #4,D1
000016BC  D481                     659          ADD.L       D1,D2
000016BE                           660          
000016BE                           661          *Read single character from input, convert to hex, bit shift left
000016BE                           662          *3 bytes and add to D2
000016BE  4EB9 00001898            663          JSR         RCHR
000016C4  1C01                     664          MOVE.B      D1,D6
000016C6  4EB9 000018A0            665          JSR         AtoH
000016CC  2206                     666          MOVE.L      D6,D1
000016CE  E989                     667          LSL.L       #4,D1
000016D0  E989                     668          LSL.L       #4,D1
000016D2  E989                     669          LSL.L       #4,D1
000016D4  E989                     670          LSL.L       #4,D1
000016D6  E989                     671          LSL.L       #4,D1
000016D8  D481                     672          ADD.L       D1,D2
000016DA                           673          
000016DA                           674          *Read single character from input, convert to hex, bit shift left
000016DA                           675          *3 bytes and add to D2
000016DA  4EB9 00001898            676          JSR         RCHR
000016E0  1C01                     677          MOVE.B      D1,D6
000016E2  4EB9 000018A0            678          JSR         AtoH
000016E8  2206                     679          MOVE.L      D6,D1
000016EA  E989                     680          LSL.L       #4,D1
000016EC  E989                     681          LSL.L       #4,D1
000016EE  E989                     682          LSL.L       #4,D1
000016F0  E989                     683          LSL.L       #4,D1
000016F2  D481                     684          ADD.L       D1,D2
000016F4                           685  
000016F4                           686          *Read single character from input, convert to hex, bit shift left
000016F4                           687          *3 bytes and add to D2
000016F4  4EB9 00001898            688          JSR         RCHR
000016FA  1C01                     689          MOVE.B      D1,D6
000016FC  4EB9 000018A0            690          JSR         AtoH
00001702  2206                     691          MOVE.L      D6,D1
00001704  E989                     692          LSL.L       #4,D1
00001706  E989                     693          LSL.L       #4,D1
00001708  E989                     694          LSL.L       #4,D1
0000170A  D481                     695          ADD.L       D1,D2
0000170C                           696  
0000170C                           697          *Read single character from input, convert to hex, bit shift left
0000170C                           698          *2 bytes and add to D2
0000170C  4EB9 00001898            699          JSR         RCHR
00001712  1C01                     700          MOVE.B      D1,D6
00001714  4EB9 000018A0            701          JSR         AtoH
0000171A  2206                     702          MOVE.L      D6,D1
0000171C  E989                     703          LSL.L       #4,D1
0000171E  E989                     704          LSL.L       #4,D1
00001720  D481                     705          ADD.L       D1,D2
00001722                           706  
00001722                           707          *Read single character from input, convert to hex, bit shift left
00001722                           708          *1 byte and add to D2
00001722  4EB9 00001898            709          JSR         RCHR
00001728  1C01                     710          MOVE.B      D1,D6
0000172A  4EB9 000018A0            711          JSR         AtoH
00001730  2206                     712          MOVE.L      D6,D1
00001732  E909                     713          LSL.B       #4,D1
00001734  D481                     714          ADD.L       D1,D2
00001736                           715  
00001736                           716          *Read single character from input, convert to hex, and add to D2
00001736  4EB9 00001898            717          JSR         RCHR
0000173C  1C01                     718          MOVE.B      D1,D6
0000173E  4EB9 000018A0            719          JSR         AtoH
00001744  2206                     720          MOVE.L      D6,D1
00001746  D441                     721          ADD         D1,D2
00001748  2602                     722          MOVE.L      D2,D3
0000174A  4E75                     723          RTS
0000174C                           724          
0000174C                           725  OutW    *convert and output word size hexa from D4 to null terminated string for trap task #13 at $6000 to $6004
0000174C                           726          *param: D4 to contain word size in hex for conversion, D5 used for calculations/bitshifting
0000174C                           727          *output: outputs to terminal window ASCII conversion 
0000174C                           728          
0000174C                           729          *bit shift right 3 bytes to get first digit, place into $6000
0000174C  3A04                     730          MOVE.W      D4,D5 
0000174E  E845                     731          ASR.W       #4,D5
00001750  E845                     732          ASR.W       #4,D5
00001752  E845                     733          ASR.W       #4,D5
00001754  1C05                     734          MOVE.B      D5,D6
00001756  4EB9 000018B6            735          JSR         HtoA
0000175C  11C6 6000                736          MOVE.B      D6,$6000
00001760                           737  
00001760                           738          *bit shift right 2 bytes and mask to get second digit, place into $6001
00001760  3A04                     739          MOVE.W      D4,D5
00001762  E845                     740          ASR.W       #4,D5
00001764  E845                     741          ASR.W       #4,D5
00001766  CA7C 000F                742          AND.W       #$000F,D5
0000176A  1C05                     743          MOVE.B      D5,D6
0000176C  4EB9 000018B6            744          JSR         HtoA
00001772  11C6 6001                745          MOVE.B      D6,$6001
00001776                           746          
00001776                           747          *bit shift right 1 byte and mask to get third digit, place into $6002
00001776  3A04                     748          MOVE.W      D4,D5
00001778  E845                     749          ASR.W       #4,D5
0000177A  CA7C 000F                750          AND.W       #$000F,D5
0000177E  1C05                     751          MOVE.B      D5,D6
00001780  4EB9 000018B6            752          JSR         HtoA
00001786  11C6 6002                753          MOVE.B      D6,$6002
0000178A                           754                
0000178A                           755          *mask to get 4th and final digit, place into $6003  
0000178A  3A04                     756          MOVE.W      D4,D5
0000178C  CA7C 000F                757          AND.W       #$000F,D5
00001790  1C05                     758          MOVE.B      D5,D6
00001792  4EB9 000018B6            759          JSR         HtoA
00001798  11C6 6003                760          MOVE.B      D6,$6003
0000179C                           761          
0000179C                           762          *add null-terminator and call trap task #13 on $6000 terminated at $6004
0000179C  11FC 0000 6004           763          MOVE.B      #$00,$6004
000017A2  327C 6000                764          MOVE.W      #$6000,A1
000017A6  103C 000D                765          MOVE.B      #13,D0
000017AA  4E4F                     766          TRAP        #15
000017AC  4E75                     767          RTS
000017AE                           768          
000017AE                           769  OutL    *convert and output word size hexa from D4 to null terminated string for trap task #13 at $6000 to $6004
000017AE                           770          *param: D4 to contain word size in hex for conversion, D5 used for calculations/bitshifting
000017AE                           771          *output: outputs to terminal window ASCII conversion 
000017AE                           772          
000017AE                           773          *bit shift right 3 bytes to get first digit, place into $6000
000017AE  2A04                     774          MOVE.L      D4,D5 
000017B0  E885                     775          ASR.L       #4,D5
000017B2  E885                     776          ASR.L       #4,D5
000017B4  E885                     777          ASR.L       #4,D5
000017B6  E885                     778          ASR.L       #4,D5
000017B8  E885                     779          ASR.L       #4,D5
000017BA  E885                     780          ASR.L       #4,D5
000017BC  E885                     781          ASR.L       #4,D5
000017BE  1C05                     782          MOVE.B      D5,D6
000017C0  4EB9 000018B6            783          JSR         HtoA
000017C6  11C6 6000                784          MOVE.B      D6,$6000
000017CA                           785          
000017CA                           786          *bit shift right 3 bytes to get first digit, place into $6000
000017CA  2A04                     787          MOVE.L      D4,D5 
000017CC  E885                     788          ASR.L       #4,D5
000017CE  E885                     789          ASR.L       #4,D5
000017D0  E885                     790          ASR.L       #4,D5
000017D2  E885                     791          ASR.L       #4,D5
000017D4  E885                     792          ASR.L       #4,D5
000017D6  E885                     793          ASR.L       #4,D5
000017D8  CABC 0000000F            794          AND.L       #$0000000F,D5
000017DE  1C05                     795          MOVE.B      D5,D6
000017E0  4EB9 000018B6            796          JSR         HtoA
000017E6  11C6 6001                797          MOVE.B      D6,$6001
000017EA                           798          
000017EA                           799          *bit shift right 3 bytes to get first digit, place into $6000
000017EA  2A04                     800          MOVE.L      D4,D5 
000017EC  E885                     801          ASR.L       #4,D5
000017EE  E885                     802          ASR.L       #4,D5
000017F0  E885                     803          ASR.L       #4,D5
000017F2  E885                     804          ASR.L       #4,D5
000017F4  E885                     805          ASR.L       #4,D5
000017F6  CABC 0000000F            806          AND.L       #$0000000F,D5
000017FC  1C05                     807          MOVE.B      D5,D6
000017FE  4EB9 000018B6            808          JSR         HtoA
00001804  11C6 6002                809          MOVE.B      D6,$6002
00001808                           810          
00001808                           811          *bit shift right 3 bytes to get first digit, place into $6000
00001808  2A04                     812          MOVE.L      D4,D5 
0000180A  E885                     813          ASR.L       #4,D5
0000180C  E885                     814          ASR.L       #4,D5
0000180E  E885                     815          ASR.L       #4,D5
00001810  E885                     816          ASR.L       #4,D5
00001812  CABC 0000000F            817          AND.L       #$0000000F,D5
00001818  1C05                     818          MOVE.B      D5,D6
0000181A  4EB9 000018B6            819          JSR         HtoA
00001820  11C6 6003                820          MOVE.B      D6,$6003
00001824                           821  
00001824                           822          *bit shift right 2 bytes and mask to get second digit, place into $6001
00001824  2A04                     823          MOVE.L      D4,D5
00001826  E885                     824          ASR.L       #4,D5
00001828  E885                     825          ASR.L       #4,D5
0000182A  E885                     826          ASR.L       #4,D5
0000182C  CABC 0000000F            827          AND.L       #$000F,D5
00001832  1C05                     828          MOVE.B      D5,D6
00001834  4EB9 000018B6            829          JSR         HtoA
0000183A  11C6 6004                830          MOVE.B      D6,$6004
0000183E                           831          
0000183E                           832          *bit shift right 1 byte and mask to get third digit, place into $6002
0000183E  2A04                     833          MOVE.L      D4,D5
00001840  E885                     834          ASR.L       #4,D5
00001842  E885                     835          ASR.L       #4,D5
00001844  CABC 0000000F            836          AND.L       #$000F,D5
0000184A  1C05                     837          MOVE.B      D5,D6
0000184C  4EB9 000018B6            838          JSR         HtoA
00001852  11C6 6005                839          MOVE.B      D6,$6005
00001856                           840                
00001856                           841          *mask to get 4th and final digit, place into $6003  
00001856  2A04                     842          MOVE.L      D4,D5
00001858  E885                     843          ASR.L       #4,D5
0000185A  CABC 0000000F            844          AND.L       #$000F,D5
00001860  1C05                     845          MOVE.B      D5,D6
00001862  4EB9 000018B6            846          JSR         HtoA
00001868  11C6 6006                847          MOVE.B      D6,$6006
0000186C                           848          
0000186C                           849          *mask to get 4th and final digit, place into $6003  
0000186C  2A04                     850          MOVE.L      D4,D5
0000186E  CABC 0000000F            851          AND.L       #$000F,D5
00001874  1C05                     852          MOVE.B      D5,D6
00001876  4EB9 000018B6            853          JSR         HtoA
0000187C  11C6 6007                854          MOVE.B      D6,$6007
00001880                           855          
00001880                           856          *add null-terminator and call trap task #13 on $6000 terminated at $6004
00001880  11FC 0020 6008           857          MOVE.B      #$20,$6008
00001886  11FC 0000 6009           858          MOVE.B      #$00,$6009
0000188C  327C 6000                859          MOVE.W      #$6000,A1
00001890  103C 000E                860          MOVE.B      #14,D0
00001894  4E4F                     861          TRAP        #15
00001896  4E75                     862          RTS
00001898                           863          
00001898                           864  *reads single character from user input & stores into D1.L 
00001898  103C 0005                865  RCHR    MOVE.B      #5,D0
0000189C  4E4F                     866          TRAP        #15
0000189E  4E75                     867          RTS
000018A0                           868    
000018A0                           869    *ASCII to Hex for the numbers. Requires D6 as parameter (0-9)
000018A0  1E3C 0000                870  AtoH    MOVE.B      #0,D7
000018A4  0C06 0030                871          CMPI.B      #$30,D6
000018A8  6D1E                     872          BLT.B       ERR
000018AA  BC3C 0039                873          CMP.B       #$39,D6
000018AE  6E30                     874          BGT.B       ALPHA
000018B0  0406 0030                875          SUBI.B      #$30,D6
000018B4  4E75                     876          RTS
000018B6                           877  
000018B6                           878  HtoA    *converts Hexa to ASCII 
000018B6  0C06 000A                879          CMPI.B      #$A,D6
000018BA  6C06                     880          BGE.B       REVALPHA
000018BC  0606 0030                881          ADDI.B      #$30,D6 *if byte is number, add $30 to convert to respective ASCII
000018C0  4E75                     882          RTS
000018C2                           883          
000018C2                           884  REVALPHA *if byte is letter, add $37 to convert to ASCII   
000018C2  0606 0037                885          ADDI.B      #$37,D6
000018C6  4E75                     886          RTS
000018C8                           887    
000018C8                           888  *error catch for inproper user input
000018C8  123C 0050                889  ERR     MOVE.B      #80,D1
000018CC  103C 000D                890          MOVE.B      #13,D0
000018D0  43F9 00001944            891          LEA         ERROR,A1
000018D6  4E4F                     892          TRAP        #15
000018D8  1E3C 0001                893          MOVE.B      #1,D7
000018DC  6000 F722                894          BRA         START 
000018E0                           895    
000018E0                           896  *ASCII to Hex for the letters. Requires D6 as parameter(A-F all capitals)
000018E0  0C06 0041                897  ALPHA   CMPI.B      #$41,D6
000018E4  6DE2                     898          BLT.B       ERR
000018E6  0C06 0046                899          CMPI.B      #$46,D6
000018EA  6EDC                     900          BGT.B       ERR
000018EC  0406 0037                901          SUBI.B      #$37,D6
000018F0  4E75                     902          RTS
000018F2                           903          
000018F2                           904  HEX_CHAR     
000018F2= 30 00                    905      DC.B    '0',0
000018F4= 31 00                    906      DC.B    '1',0
000018F6= 32 00                    907      DC.B    '2',0
000018F8= 33 00                    908      DC.B    '3',0    
000018FA= 34 00                    909      DC.B    '4',0    
000018FC= 35 00                    910      DC.B    '5',0
000018FE= 36 00                    911      DC.B    '6',0
00001900= 37 00                    912      DC.B    '7',0
00001902= 38 00                    913      DC.B    '8',0
00001904= 39 00                    914      DC.B    '9',0
00001906= 41 00                    915      DC.B    'A',0
00001908= 42 00                    916      DC.B    'B',0
0000190A= 43 00                    917      DC.B    'C',0
0000190C= 44 00                    918      DC.B    'D',0
0000190E= 45 00                    919      DC.B    'E',0
00001910= 46 00                    920      DC.B    'F',0
00001912                           921  
00001912= 28 00                    922  PRINT_LPAREN    DC.B    '(',0
00001914= 29 00                    923  PRINT_RPAREN    DC.B    ')',0
00001916= 2D 00                    924  PRINT_MINUS     DC.B    '-',0
00001918= 2B 00                    925  PRINT_PLUS      DC.B    '+',0
0000191A= 24 00                    926  PRINT_DOLLAR    DC.B   '$',0
0000191C= 23 00                    927  PRINT_OCTOTH    DC.B    '#',0
0000191E= 2C 00                    928  PRINT_COMMA     DC.B    ',',0
00001920= 49 6E 76 61 6C 69 ...    929  PRINT_INVALIDEA DC.B    'Invalid EA ',0
0000192C= 49 6E 76 61 6C 69 ...    930  PRINT_INVALIDDATA   DC.B    'Invalid Instruction    ',0
00001944  =0000000D                931  CR              EQU         $0D
00001944  =0000000A                932  LF              EQU         $0A
00001944= 20455252 4F522049 ...    933  ERROR           DC.L    ' ERROR INVALID INPUT ',CR,0
00001964= 45 6E 74 65 72 20 ...    934  Start1          DC.B    'Enter even Long starting memory location ',CR,LF,'(Capital for letters): ',0
000019A7= 45 6E 74 65 72 20 ...    935  Start2          DC.B    'Enter even Long ending memory location ',CR,LF,'(Capital for letters): ',0
000019E8                           936  StartMem        DS.L    1
000019EC                           937  EndMem          DS.L    1
000019F0                           938  CurrentAddr     DS.L    1
000019F4= 0D 0A 00                 939  ENTER           DC.B    CR,LF,0
000019F7= 2E 57 20 20 20 20 00     940  PrintSizeW      DC.B    '.W    ',0
000019FE= 2E 42 20 20 20 20 00     941  PrintSizeB      DC.B    '.B    ',0
00001A05= 2E 4C 20 20 20 20 00     942  PrintSizeL      DC.B    '.L    ',0
00001A0C= 4C 45 41 20 20 20 00     943  PrintLEA        DC.B    'LEA   ',0
00001A13= 41 44 44 51 00           944  PrintADDQ       DC.B    'ADDQ',0
00001A18= 4D 4F 56 45 51 2E ...    945  PrintMOVEQL     DC.B    'MOVEQ.L    ',0
00001A24= 53 55 42 00              946  PrintSUB        DC.B    'SUB',0
00001A28= 4F 52 00                 947  PrintOR         DC.B    'OR',0
00001A2B= 41 44 44 41 00           948  PrintADDA       DC.B    'ADDA',0
00001A30= 41 44 44 00              949  PrintADD        DC.B    'ADD',0
00001A34= 4C 53 00                 950  PrintLS         DC.B    'LS',0
00001A37= 52 4F 00                 951  PrintRO         DC.B    'RO',0
00001A3A= 41 53 00                 952  PrintAS         DC.B    'AS',0
00001A3D= 52 00                    953  PrintR          DC.B    'R',0
00001A3F= 4C 00                    954  PrintL          DC.B    'L',0
00001A41= 4E 4F 54 00              955  PrintNOT        DC.B    'NOT',0
00001A45= 4D 4F 56 45 4D 00        956  PrintMOVEM      DC.B    'MOVEM',0
00001A4B= 4E 4F 50 20 20 20 ...    957  PrintNOP        DC.B    'NOP    ',0
00001A53= 52 54 53 20 20 20 ...    958  PrintRTS        DC.B    'RTS    ',0
00001A5B= 4A 53 52 20 20 20 ...    959  PrintJSR        DC.B    'JSR    ',0
00001A63= 4D 4F 56 45 2E 42 ...    960  PrintMOVEB      DC.B    'MOVE.B    ',0
00001A6E= 42 47 54 20 20 20 ...    961  PrintBGT        DC.B    'BGT    ',0
00001A76= 42 4C 45 20 20 20 ...    962  PrintBLE        DC.B    'BLE    ',0
00001A7E= 42 52 41 20 20 20 ...    963  PrintBRA        DC.B    'BRA    ',0
00001A86= 42 45 51 20 20 20 ...    964  PrintBEQ        DC.B    'BEQ    ',0
00001A8E                           965  
00001A8E                           966  
00001A8E                           967      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_LONG            15B6
ABS_SHORT           15CA
ADD                 13C4
ADDA                13B2
ADDAADD             13A0
ADDQ                13D8
ALPHA               18E0
AS                  1356
ATOH                18A0
BADDATA             10F0
BEQ                 11B0
BGT                 117A
BLE                 118C
BRA                 119E
BRANCHCHECK         1158
CR                  D
CURRENTADDR         19F0
DECODE_EA           14CC
DEST_MODE           1512
DEST_REGISTER       1516
DISPLACEMENTCHECK   11F2
EACHECK             145C
EAFILL              1492
EAMODE_TABLE        14E2
END                 107A
ENDMEM              19EC
ENTER               19F4
ERR                 18C8
ERROR               1944
FOURCHECKER         1258
HEX_CHAR            18F2
HTOA                18B6
IMMEDIATE           15EC
IMMED_L             162A
INVALID             1672
JMPCHECK            107E
JSR                 12AE
JSRDISP             11C2
LEA                 1420
LEFTSHIFT           138A
LF                  A
LOOP                1650
LS                  131A
LSROAS              1300
MODE_000            1512
MODE_001            152E
MODE_010            154A
MODE_011            1568
MODE_100            157A
MODE_101            158C
MODE_110            1592
MODE_111            1598
MOVEB               1242
MOVEM               12E2
MOVEQL              13EC
NOP                 129E
NOPRTS              128C
NOPRTSJSR           127A
NOT                 12CE
OP_SIZE             1520
OR                  140C
OUTL                17AE
OUTW                174C
PRINTADD            1A30
PRINTADDA           1A2B
PRINTADDQ           1A13
PRINTAS             1A3A
PRINTB              112C
PRINTBEQ            1A86
PRINTBGT            1A6E
PRINTBLE            1A76
PRINTBRA            1A7E
PRINTJSR            1A5B
PRINTL              1A3F
PRINTLEA            1A0C
PRINTLS             1A34
PRINTMOVEB          1A63
PRINTMOVEM          1A45
PRINTMOVEQL         1A18
PRINTNOP            1A4B
PRINTNOT            1A41
PRINTOR             1A28
PRINTR              1A3D
PRINTRO             1A37
PRINTRTS            1A53
PRINTSIZE           1100
PRINTSIZEB          19FE
PRINTSIZEL          1A05
PRINTSIZEW          19F7
PRINTSUB            1A24
PRINTW              1142
PRINT_COMMA         191E
PRINT_DOLLAR        191A
PRINT_HEX           163C
PRINT_INVALIDDATA   192C
PRINT_INVALIDEA     1920
PRINT_LPAREN        1912
PRINT_MINUS         1916
PRINT_OCTOTH        191C
PRINT_PLUS          1918
PRINT_RPAREN        1914
RCHR                1898
READL               1680
REVALPHA            18C2
RIGHTSHIFT          1374
RO                  1338
RTS                 12BE
SEARCH              1056
SRC_MODE            1504
SRC_REGISTER        1508
START               1000
START1              1964
START2              19A7
STARTMEM            19E8
SUB                 13FC
TEST_VALUE          1202
WORDDISP            122E
